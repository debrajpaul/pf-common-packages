// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: transaction/v1/transaction.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import { TenantContext } from "../../common/v1/context";

export const protobufPackage = "transaction.v1";

export interface IngestStatementRequest {
  ctx:
    | TenantContext
    | undefined;
  /** e.g., s3://bucket/tenantId/2025-10/file.pdf */
  s3Uri: string;
  /** "HDFC_PDF", "CSV_UPLOAD", etc. */
  source: string;
  /** idempotency token */
  requestId: string;
}

export interface IngestStatementResponse {
  /** number of lines/entries accepted */
  accepted: number;
}

export interface ListTransactionsRequest {
  ctx: TenantContext | undefined;
  limit: number;
  cursor: string;
  /** optional filter */
  category: string;
}

export interface ListTransactionsResponse {
  items: Transaction[];
  nextCursor: string;
}

export interface GetTransactionRequest {
  ctx: TenantContext | undefined;
  id: string;
}

export interface Transaction {
  id: string;
  description: string;
  amount: number;
  category: string;
  /** epoch millis */
  ts: Long;
  account: string;
  /** "INR" etc. */
  currency: string;
  /** optional raw memo */
  raw: string;
}

function createBaseIngestStatementRequest(): IngestStatementRequest {
  return { ctx: undefined, s3Uri: "", source: "", requestId: "" };
}

export const IngestStatementRequest: MessageFns<IngestStatementRequest> = {
  encode(message: IngestStatementRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ctx !== undefined) {
      TenantContext.encode(message.ctx, writer.uint32(10).fork()).join();
    }
    if (message.s3Uri !== "") {
      writer.uint32(18).string(message.s3Uri);
    }
    if (message.source !== "") {
      writer.uint32(26).string(message.source);
    }
    if (message.requestId !== "") {
      writer.uint32(34).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IngestStatementRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIngestStatementRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ctx = TenantContext.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.s3Uri = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.source = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<IngestStatementRequest>): IngestStatementRequest {
    return IngestStatementRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IngestStatementRequest>): IngestStatementRequest {
    const message = createBaseIngestStatementRequest();
    message.ctx = (object.ctx !== undefined && object.ctx !== null) ? TenantContext.fromPartial(object.ctx) : undefined;
    message.s3Uri = object.s3Uri ?? "";
    message.source = object.source ?? "";
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseIngestStatementResponse(): IngestStatementResponse {
  return { accepted: 0 };
}

export const IngestStatementResponse: MessageFns<IngestStatementResponse> = {
  encode(message: IngestStatementResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accepted !== 0) {
      writer.uint32(8).int32(message.accepted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IngestStatementResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIngestStatementResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.accepted = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<IngestStatementResponse>): IngestStatementResponse {
    return IngestStatementResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IngestStatementResponse>): IngestStatementResponse {
    const message = createBaseIngestStatementResponse();
    message.accepted = object.accepted ?? 0;
    return message;
  },
};

function createBaseListTransactionsRequest(): ListTransactionsRequest {
  return { ctx: undefined, limit: 0, cursor: "", category: "" };
}

export const ListTransactionsRequest: MessageFns<ListTransactionsRequest> = {
  encode(message: ListTransactionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ctx !== undefined) {
      TenantContext.encode(message.ctx, writer.uint32(10).fork()).join();
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    if (message.cursor !== "") {
      writer.uint32(26).string(message.cursor);
    }
    if (message.category !== "") {
      writer.uint32(34).string(message.category);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTransactionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTransactionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ctx = TenantContext.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cursor = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.category = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListTransactionsRequest>): ListTransactionsRequest {
    return ListTransactionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTransactionsRequest>): ListTransactionsRequest {
    const message = createBaseListTransactionsRequest();
    message.ctx = (object.ctx !== undefined && object.ctx !== null) ? TenantContext.fromPartial(object.ctx) : undefined;
    message.limit = object.limit ?? 0;
    message.cursor = object.cursor ?? "";
    message.category = object.category ?? "";
    return message;
  },
};

function createBaseListTransactionsResponse(): ListTransactionsResponse {
  return { items: [], nextCursor: "" };
}

export const ListTransactionsResponse: MessageFns<ListTransactionsResponse> = {
  encode(message: ListTransactionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      Transaction.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextCursor !== "") {
      writer.uint32(18).string(message.nextCursor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTransactionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTransactionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(Transaction.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextCursor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListTransactionsResponse>): ListTransactionsResponse {
    return ListTransactionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTransactionsResponse>): ListTransactionsResponse {
    const message = createBaseListTransactionsResponse();
    message.items = object.items?.map((e) => Transaction.fromPartial(e)) || [];
    message.nextCursor = object.nextCursor ?? "";
    return message;
  },
};

function createBaseGetTransactionRequest(): GetTransactionRequest {
  return { ctx: undefined, id: "" };
}

export const GetTransactionRequest: MessageFns<GetTransactionRequest> = {
  encode(message: GetTransactionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ctx !== undefined) {
      TenantContext.encode(message.ctx, writer.uint32(10).fork()).join();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTransactionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTransactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ctx = TenantContext.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetTransactionRequest>): GetTransactionRequest {
    return GetTransactionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTransactionRequest>): GetTransactionRequest {
    const message = createBaseGetTransactionRequest();
    message.ctx = (object.ctx !== undefined && object.ctx !== null) ? TenantContext.fromPartial(object.ctx) : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseTransaction(): Transaction {
  return { id: "", description: "", amount: 0, category: "", ts: Long.ZERO, account: "", currency: "", raw: "" };
}

export const Transaction: MessageFns<Transaction> = {
  encode(message: Transaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.amount !== 0) {
      writer.uint32(25).double(message.amount);
    }
    if (message.category !== "") {
      writer.uint32(34).string(message.category);
    }
    if (!message.ts.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.ts.toString());
    }
    if (message.account !== "") {
      writer.uint32(50).string(message.account);
    }
    if (message.currency !== "") {
      writer.uint32(58).string(message.currency);
    }
    if (message.raw !== "") {
      writer.uint32(66).string(message.raw);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Transaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.amount = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.ts = Long.fromString(reader.int64().toString());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.account = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.raw = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Transaction>): Transaction {
    return Transaction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Transaction>): Transaction {
    const message = createBaseTransaction();
    message.id = object.id ?? "";
    message.description = object.description ?? "";
    message.amount = object.amount ?? 0;
    message.category = object.category ?? "";
    message.ts = (object.ts !== undefined && object.ts !== null) ? Long.fromValue(object.ts) : Long.ZERO;
    message.account = object.account ?? "";
    message.currency = object.currency ?? "";
    message.raw = object.raw ?? "";
    return message;
  },
};

export type TransactionServiceService = typeof TransactionServiceService;
export const TransactionServiceService = {
  ingestStatement: {
    path: "/transaction.v1.TransactionService/IngestStatement",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: IngestStatementRequest) => Buffer.from(IngestStatementRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => IngestStatementRequest.decode(value),
    responseSerialize: (value: IngestStatementResponse) => Buffer.from(IngestStatementResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => IngestStatementResponse.decode(value),
  },
  listTransactions: {
    path: "/transaction.v1.TransactionService/ListTransactions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListTransactionsRequest) => Buffer.from(ListTransactionsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListTransactionsRequest.decode(value),
    responseSerialize: (value: ListTransactionsResponse) =>
      Buffer.from(ListTransactionsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListTransactionsResponse.decode(value),
  },
  getTransaction: {
    path: "/transaction.v1.TransactionService/GetTransaction",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetTransactionRequest) => Buffer.from(GetTransactionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetTransactionRequest.decode(value),
    responseSerialize: (value: Transaction) => Buffer.from(Transaction.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Transaction.decode(value),
  },
} as const;

export interface TransactionServiceServer extends UntypedServiceImplementation {
  ingestStatement: handleUnaryCall<IngestStatementRequest, IngestStatementResponse>;
  listTransactions: handleUnaryCall<ListTransactionsRequest, ListTransactionsResponse>;
  getTransaction: handleUnaryCall<GetTransactionRequest, Transaction>;
}

export interface TransactionServiceClient extends Client {
  ingestStatement(
    request: IngestStatementRequest,
    callback: (error: ServiceError | null, response: IngestStatementResponse) => void,
  ): ClientUnaryCall;
  ingestStatement(
    request: IngestStatementRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: IngestStatementResponse) => void,
  ): ClientUnaryCall;
  ingestStatement(
    request: IngestStatementRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: IngestStatementResponse) => void,
  ): ClientUnaryCall;
  listTransactions(
    request: ListTransactionsRequest,
    callback: (error: ServiceError | null, response: ListTransactionsResponse) => void,
  ): ClientUnaryCall;
  listTransactions(
    request: ListTransactionsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListTransactionsResponse) => void,
  ): ClientUnaryCall;
  listTransactions(
    request: ListTransactionsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListTransactionsResponse) => void,
  ): ClientUnaryCall;
  getTransaction(
    request: GetTransactionRequest,
    callback: (error: ServiceError | null, response: Transaction) => void,
  ): ClientUnaryCall;
  getTransaction(
    request: GetTransactionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Transaction) => void,
  ): ClientUnaryCall;
  getTransaction(
    request: GetTransactionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Transaction) => void,
  ): ClientUnaryCall;
}

export const TransactionServiceClient = makeGenericClientConstructor(
  TransactionServiceService,
  "transaction.v1.TransactionService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TransactionServiceClient;
  service: typeof TransactionServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
