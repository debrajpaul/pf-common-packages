// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: notification/v1/notification.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import { TenantContext } from "../../common/v1/context";

export const protobufPackage = "notification.v1";

export interface SendEmailRequest {
  ctx: TenantContext | undefined;
  to: string;
  /** template key */
  template: string;
  /** template variables */
  data: { [key: string]: string };
}

export interface SendEmailRequest_DataEntry {
  key: string;
  value: string;
}

export interface SendSmsRequest {
  ctx: TenantContext | undefined;
  to: string;
  text: string;
}

export interface SendResponse {
  id: string;
  /** "QUEUED", "SENT", "FAILED" */
  status: string;
}

function createBaseSendEmailRequest(): SendEmailRequest {
  return { ctx: undefined, to: "", template: "", data: {} };
}

export const SendEmailRequest: MessageFns<SendEmailRequest> = {
  encode(message: SendEmailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ctx !== undefined) {
      TenantContext.encode(message.ctx, writer.uint32(10).fork()).join();
    }
    if (message.to !== "") {
      writer.uint32(18).string(message.to);
    }
    if (message.template !== "") {
      writer.uint32(26).string(message.template);
    }
    Object.entries(message.data).forEach(([key, value]) => {
      SendEmailRequest_DataEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendEmailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendEmailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ctx = TenantContext.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.to = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.template = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = SendEmailRequest_DataEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.data[entry4.key] = entry4.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SendEmailRequest>): SendEmailRequest {
    return SendEmailRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendEmailRequest>): SendEmailRequest {
    const message = createBaseSendEmailRequest();
    message.ctx = (object.ctx !== undefined && object.ctx !== null) ? TenantContext.fromPartial(object.ctx) : undefined;
    message.to = object.to ?? "";
    message.template = object.template ?? "";
    message.data = Object.entries(object.data ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseSendEmailRequest_DataEntry(): SendEmailRequest_DataEntry {
  return { key: "", value: "" };
}

export const SendEmailRequest_DataEntry: MessageFns<SendEmailRequest_DataEntry> = {
  encode(message: SendEmailRequest_DataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendEmailRequest_DataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendEmailRequest_DataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SendEmailRequest_DataEntry>): SendEmailRequest_DataEntry {
    return SendEmailRequest_DataEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendEmailRequest_DataEntry>): SendEmailRequest_DataEntry {
    const message = createBaseSendEmailRequest_DataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseSendSmsRequest(): SendSmsRequest {
  return { ctx: undefined, to: "", text: "" };
}

export const SendSmsRequest: MessageFns<SendSmsRequest> = {
  encode(message: SendSmsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ctx !== undefined) {
      TenantContext.encode(message.ctx, writer.uint32(10).fork()).join();
    }
    if (message.to !== "") {
      writer.uint32(18).string(message.to);
    }
    if (message.text !== "") {
      writer.uint32(26).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendSmsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendSmsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ctx = TenantContext.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.to = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.text = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SendSmsRequest>): SendSmsRequest {
    return SendSmsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendSmsRequest>): SendSmsRequest {
    const message = createBaseSendSmsRequest();
    message.ctx = (object.ctx !== undefined && object.ctx !== null) ? TenantContext.fromPartial(object.ctx) : undefined;
    message.to = object.to ?? "";
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseSendResponse(): SendResponse {
  return { id: "", status: "" };
}

export const SendResponse: MessageFns<SendResponse> = {
  encode(message: SendResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SendResponse>): SendResponse {
    return SendResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendResponse>): SendResponse {
    const message = createBaseSendResponse();
    message.id = object.id ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

export type NotificationServiceService = typeof NotificationServiceService;
export const NotificationServiceService = {
  sendEmail: {
    path: "/notification.v1.NotificationService/SendEmail",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SendEmailRequest) => Buffer.from(SendEmailRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SendEmailRequest.decode(value),
    responseSerialize: (value: SendResponse) => Buffer.from(SendResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SendResponse.decode(value),
  },
  sendSms: {
    path: "/notification.v1.NotificationService/SendSms",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SendSmsRequest) => Buffer.from(SendSmsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SendSmsRequest.decode(value),
    responseSerialize: (value: SendResponse) => Buffer.from(SendResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SendResponse.decode(value),
  },
} as const;

export interface NotificationServiceServer extends UntypedServiceImplementation {
  sendEmail: handleUnaryCall<SendEmailRequest, SendResponse>;
  sendSms: handleUnaryCall<SendSmsRequest, SendResponse>;
}

export interface NotificationServiceClient extends Client {
  sendEmail(
    request: SendEmailRequest,
    callback: (error: ServiceError | null, response: SendResponse) => void,
  ): ClientUnaryCall;
  sendEmail(
    request: SendEmailRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SendResponse) => void,
  ): ClientUnaryCall;
  sendEmail(
    request: SendEmailRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SendResponse) => void,
  ): ClientUnaryCall;
  sendSms(
    request: SendSmsRequest,
    callback: (error: ServiceError | null, response: SendResponse) => void,
  ): ClientUnaryCall;
  sendSms(
    request: SendSmsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SendResponse) => void,
  ): ClientUnaryCall;
  sendSms(
    request: SendSmsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SendResponse) => void,
  ): ClientUnaryCall;
}

export const NotificationServiceClient = makeGenericClientConstructor(
  NotificationServiceService,
  "notification.v1.NotificationService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): NotificationServiceClient;
  service: typeof NotificationServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
