// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: budget/v1/budget.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import { TenantContext } from "../../common/v1/context";

export const protobufPackage = "budget.v1";

export interface MonthlyReviewRequest {
  ctx:
    | TenantContext
    | undefined;
  /** 1..12 */
  month: number;
  year: number;
}

export interface AnnualReviewRequest {
  ctx: TenantContext | undefined;
  year: number;
}

export interface CategoryBreakdown {
  category: string;
  amount: number;
}

export interface BudgetSummary {
  income: number;
  expenses: number;
  savings: number;
  breakdown: CategoryBreakdown[];
  recommendations: string;
}

function createBaseMonthlyReviewRequest(): MonthlyReviewRequest {
  return { ctx: undefined, month: 0, year: 0 };
}

export const MonthlyReviewRequest: MessageFns<MonthlyReviewRequest> = {
  encode(message: MonthlyReviewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ctx !== undefined) {
      TenantContext.encode(message.ctx, writer.uint32(10).fork()).join();
    }
    if (message.month !== 0) {
      writer.uint32(16).int32(message.month);
    }
    if (message.year !== 0) {
      writer.uint32(24).int32(message.year);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MonthlyReviewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMonthlyReviewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ctx = TenantContext.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.month = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.year = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<MonthlyReviewRequest>): MonthlyReviewRequest {
    return MonthlyReviewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MonthlyReviewRequest>): MonthlyReviewRequest {
    const message = createBaseMonthlyReviewRequest();
    message.ctx = (object.ctx !== undefined && object.ctx !== null) ? TenantContext.fromPartial(object.ctx) : undefined;
    message.month = object.month ?? 0;
    message.year = object.year ?? 0;
    return message;
  },
};

function createBaseAnnualReviewRequest(): AnnualReviewRequest {
  return { ctx: undefined, year: 0 };
}

export const AnnualReviewRequest: MessageFns<AnnualReviewRequest> = {
  encode(message: AnnualReviewRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ctx !== undefined) {
      TenantContext.encode(message.ctx, writer.uint32(10).fork()).join();
    }
    if (message.year !== 0) {
      writer.uint32(16).int32(message.year);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnnualReviewRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnnualReviewRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ctx = TenantContext.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.year = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AnnualReviewRequest>): AnnualReviewRequest {
    return AnnualReviewRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AnnualReviewRequest>): AnnualReviewRequest {
    const message = createBaseAnnualReviewRequest();
    message.ctx = (object.ctx !== undefined && object.ctx !== null) ? TenantContext.fromPartial(object.ctx) : undefined;
    message.year = object.year ?? 0;
    return message;
  },
};

function createBaseCategoryBreakdown(): CategoryBreakdown {
  return { category: "", amount: 0 };
}

export const CategoryBreakdown: MessageFns<CategoryBreakdown> = {
  encode(message: CategoryBreakdown, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.category !== "") {
      writer.uint32(10).string(message.category);
    }
    if (message.amount !== 0) {
      writer.uint32(17).double(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CategoryBreakdown {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategoryBreakdown();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.amount = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CategoryBreakdown>): CategoryBreakdown {
    return CategoryBreakdown.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CategoryBreakdown>): CategoryBreakdown {
    const message = createBaseCategoryBreakdown();
    message.category = object.category ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseBudgetSummary(): BudgetSummary {
  return { income: 0, expenses: 0, savings: 0, breakdown: [], recommendations: "" };
}

export const BudgetSummary: MessageFns<BudgetSummary> = {
  encode(message: BudgetSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.income !== 0) {
      writer.uint32(9).double(message.income);
    }
    if (message.expenses !== 0) {
      writer.uint32(17).double(message.expenses);
    }
    if (message.savings !== 0) {
      writer.uint32(25).double(message.savings);
    }
    for (const v of message.breakdown) {
      CategoryBreakdown.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.recommendations !== "") {
      writer.uint32(42).string(message.recommendations);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BudgetSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBudgetSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.income = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.expenses = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.savings = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.breakdown.push(CategoryBreakdown.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.recommendations = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BudgetSummary>): BudgetSummary {
    return BudgetSummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BudgetSummary>): BudgetSummary {
    const message = createBaseBudgetSummary();
    message.income = object.income ?? 0;
    message.expenses = object.expenses ?? 0;
    message.savings = object.savings ?? 0;
    message.breakdown = object.breakdown?.map((e) => CategoryBreakdown.fromPartial(e)) || [];
    message.recommendations = object.recommendations ?? "";
    return message;
  },
};

export type BudgetServiceService = typeof BudgetServiceService;
export const BudgetServiceService = {
  monthlyReview: {
    path: "/budget.v1.BudgetService/MonthlyReview",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MonthlyReviewRequest) => Buffer.from(MonthlyReviewRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => MonthlyReviewRequest.decode(value),
    responseSerialize: (value: BudgetSummary) => Buffer.from(BudgetSummary.encode(value).finish()),
    responseDeserialize: (value: Buffer) => BudgetSummary.decode(value),
  },
  annualReview: {
    path: "/budget.v1.BudgetService/AnnualReview",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AnnualReviewRequest) => Buffer.from(AnnualReviewRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AnnualReviewRequest.decode(value),
    responseSerialize: (value: BudgetSummary) => Buffer.from(BudgetSummary.encode(value).finish()),
    responseDeserialize: (value: Buffer) => BudgetSummary.decode(value),
  },
} as const;

export interface BudgetServiceServer extends UntypedServiceImplementation {
  monthlyReview: handleUnaryCall<MonthlyReviewRequest, BudgetSummary>;
  annualReview: handleUnaryCall<AnnualReviewRequest, BudgetSummary>;
}

export interface BudgetServiceClient extends Client {
  monthlyReview(
    request: MonthlyReviewRequest,
    callback: (error: ServiceError | null, response: BudgetSummary) => void,
  ): ClientUnaryCall;
  monthlyReview(
    request: MonthlyReviewRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: BudgetSummary) => void,
  ): ClientUnaryCall;
  monthlyReview(
    request: MonthlyReviewRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: BudgetSummary) => void,
  ): ClientUnaryCall;
  annualReview(
    request: AnnualReviewRequest,
    callback: (error: ServiceError | null, response: BudgetSummary) => void,
  ): ClientUnaryCall;
  annualReview(
    request: AnnualReviewRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: BudgetSummary) => void,
  ): ClientUnaryCall;
  annualReview(
    request: AnnualReviewRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: BudgetSummary) => void,
  ): ClientUnaryCall;
}

export const BudgetServiceClient = makeGenericClientConstructor(
  BudgetServiceService,
  "budget.v1.BudgetService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): BudgetServiceClient;
  service: typeof BudgetServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
