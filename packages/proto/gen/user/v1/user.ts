// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: user/v1/user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import { TenantContext } from "../../common/v1/context";

export const protobufPackage = "user.v1";

export interface GetMeRequest {
  ctx: TenantContext | undefined;
}

export interface GetMeResponse {
  userId: string;
  email: string;
  tenantId: string;
}

export interface ValidateJwtRequest {
  jwt: string;
}

export interface ValidateJwtResponse {
  valid: boolean;
  tenantId: string;
  userId: string;
  email: string;
}

function createBaseGetMeRequest(): GetMeRequest {
  return { ctx: undefined };
}

export const GetMeRequest: MessageFns<GetMeRequest> = {
  encode(message: GetMeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ctx !== undefined) {
      TenantContext.encode(message.ctx, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ctx = TenantContext.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetMeRequest>): GetMeRequest {
    return GetMeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMeRequest>): GetMeRequest {
    const message = createBaseGetMeRequest();
    message.ctx = (object.ctx !== undefined && object.ctx !== null) ? TenantContext.fromPartial(object.ctx) : undefined;
    return message;
  },
};

function createBaseGetMeResponse(): GetMeResponse {
  return { userId: "", email: "", tenantId: "" };
}

export const GetMeResponse: MessageFns<GetMeResponse> = {
  encode(message: GetMeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.tenantId !== "") {
      writer.uint32(26).string(message.tenantId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetMeResponse>): GetMeResponse {
    return GetMeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMeResponse>): GetMeResponse {
    const message = createBaseGetMeResponse();
    message.userId = object.userId ?? "";
    message.email = object.email ?? "";
    message.tenantId = object.tenantId ?? "";
    return message;
  },
};

function createBaseValidateJwtRequest(): ValidateJwtRequest {
  return { jwt: "" };
}

export const ValidateJwtRequest: MessageFns<ValidateJwtRequest> = {
  encode(message: ValidateJwtRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jwt !== "") {
      writer.uint32(10).string(message.jwt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateJwtRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateJwtRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jwt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ValidateJwtRequest>): ValidateJwtRequest {
    return ValidateJwtRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidateJwtRequest>): ValidateJwtRequest {
    const message = createBaseValidateJwtRequest();
    message.jwt = object.jwt ?? "";
    return message;
  },
};

function createBaseValidateJwtResponse(): ValidateJwtResponse {
  return { valid: false, tenantId: "", userId: "", email: "" };
}

export const ValidateJwtResponse: MessageFns<ValidateJwtResponse> = {
  encode(message: ValidateJwtResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.valid !== false) {
      writer.uint32(8).bool(message.valid);
    }
    if (message.tenantId !== "") {
      writer.uint32(18).string(message.tenantId);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    if (message.email !== "") {
      writer.uint32(34).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateJwtResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateJwtResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.valid = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ValidateJwtResponse>): ValidateJwtResponse {
    return ValidateJwtResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidateJwtResponse>): ValidateJwtResponse {
    const message = createBaseValidateJwtResponse();
    message.valid = object.valid ?? false;
    message.tenantId = object.tenantId ?? "";
    message.userId = object.userId ?? "";
    message.email = object.email ?? "";
    return message;
  },
};

export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  getMe: {
    path: "/user.v1.UserService/GetMe",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetMeRequest) => Buffer.from(GetMeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetMeRequest.decode(value),
    responseSerialize: (value: GetMeResponse) => Buffer.from(GetMeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetMeResponse.decode(value),
  },
  validateJwt: {
    path: "/user.v1.UserService/ValidateJwt",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ValidateJwtRequest) => Buffer.from(ValidateJwtRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ValidateJwtRequest.decode(value),
    responseSerialize: (value: ValidateJwtResponse) => Buffer.from(ValidateJwtResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ValidateJwtResponse.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  getMe: handleUnaryCall<GetMeRequest, GetMeResponse>;
  validateJwt: handleUnaryCall<ValidateJwtRequest, ValidateJwtResponse>;
}

export interface UserServiceClient extends Client {
  getMe(
    request: GetMeRequest,
    callback: (error: ServiceError | null, response: GetMeResponse) => void,
  ): ClientUnaryCall;
  getMe(
    request: GetMeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetMeResponse) => void,
  ): ClientUnaryCall;
  getMe(
    request: GetMeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetMeResponse) => void,
  ): ClientUnaryCall;
  validateJwt(
    request: ValidateJwtRequest,
    callback: (error: ServiceError | null, response: ValidateJwtResponse) => void,
  ): ClientUnaryCall;
  validateJwt(
    request: ValidateJwtRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ValidateJwtResponse) => void,
  ): ClientUnaryCall;
  validateJwt(
    request: ValidateJwtRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ValidateJwtResponse) => void,
  ): ClientUnaryCall;
}

export const UserServiceClient = makeGenericClientConstructor(UserServiceService, "user.v1.UserService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserServiceClient;
  service: typeof UserServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
